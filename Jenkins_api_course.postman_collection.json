{
	"info": {
		"_postman_id": "09685866-2c5d-414f-8cf1-83d57151cec9",
		"name": "Jenkins api course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "APOD mod 1.3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM&date=1995-06-16",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM"
						},
						{
							"key": "date",
							"value": "1995-06-16"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "APOD today mod 1.3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM&date=2021-11-13",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM"
						},
						{
							"key": "date",
							"value": "2021-11-13"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "APOD begin mod 1.3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM&date=1995-11-14",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM"
						},
						{
							"key": "date",
							"value": "1995-11-14"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "APOD bool mod 1.3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM&thumbs=true",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM"
						},
						{
							"key": "thumbs",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "APOD bool false mod 1.3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM&thumbs=false",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "96KmSg4xmxx1rwZdGKw8G2aH5ELaeJmrjxXWNphM"
						},
						{
							"key": "thumbs",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTBIN mod 2.1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "Добавление нового параметра ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://postb.in/1636976668047-9036068255081",
					"protocol": "https",
					"host": [
						"postb",
						"in"
					],
					"path": [
						"1636976668047-9036068255081"
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTBIN mod 2.1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"test\":\"value\"}"
				},
				"url": {
					"raw": "https://postb.in/1636976668047-9036068255081",
					"protocol": "https",
					"host": [
						"postb",
						"in"
					],
					"path": [
						"1636976668047-9036068255081"
					]
				}
			},
			"response": []
		},
		{
			"name": "SWAPI mod 2.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON",
							"pm.test(\"Correct response format JSON\", function() {",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"//2. We have all declared fields in the response",
							"pm.test(\"Check that we have all declared fields\",function(){",
							"    const jsonData =pm.response.json()",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"    });",
							"",
							"//3. Field value is not NULL",
							"pm.test(\"Check if va lue isn't NULL\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"",
							"//4. Check if value isn't empty",
							"pm.test(\"Check if value isn't empty\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"}) ",
							"",
							"//5.  Check if fild corresponds to a specific value",
							"pm.test (\"Check if fild corresponds to a specific value\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");",
							"})",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"//7. Status message is ok",
							"pm.test(\"Status message is ok\", function(){",
							"    pm.response.to.have.status(\"OK\");",
							"})",
							"",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.below(1000);",
							"})",
							"",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function(){",
							"    pm.response.to.have.header(\"Content-Type\")",
							"})",
							"",
							"//10. The response has specific header with a specific value",
							"pm.test(\"The response has specific header with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")",
							"})",
							"",
							"//11. Cookie exists",
							"//pm.test(\"Cookie exists\", function(){",
							"//    pm.cookies.has(\"\")",
							"//})",
							"",
							"//12. Cookie ha value",
							"//pm.test(\"Cookie ha value\", function(){",
							"//    try{",
							"//        var MY_COOKIE = pm.cookies.get(\"\");",
							"//        console.log(\"\");",
							"//    } catch(e){",
							"//        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)",
							"//    }    ",
							"//})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "SWAPI mod 2.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data =JSON.parse(responseBody)",
							"",
							"var schema ={",
							"    //specify the type of object",
							"    \"type\":\"object\",",
							"    //specify requires properties",
							"    \"required\":[\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],",
							"    //describe the properies",
							"    \"properies\":{",
							"        \"people\":{\"type\":\"string \"},",
							"        \"planets\":{\"type\":\"string\"},",
							"        \"films\":{\"type\":\"string\"},",
							"        \"species\":{\"type\":\"string\"},",
							"        \"vehicles\":{\"type\":\"string\"},",
							"        \"starships\":{\"type\":\"string\"},",
							"    }",
							"};",
							"",
							"pm.test('Body is correst', function(){",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "SWAPI mod 2.5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var scheema={",
							"    \"type\":\"object\",",
							"    \"required\":[\"name\",\"homeword\",\"films\",\"species\", \"vihicless\", \"starships\"],",
							"    \"property\":{",
							"        \"name\":{\"type\":\"string\"},",
							"        \"homeworld\":{\"type\":\"string\"},",
							"        \"films\":{",
							"            \"type\": \"array\",",
							"            \"items\":{\"type\":\"string\"}",
							"        },",
							"        \"spacies\":{",
							"            \"type\":\"array\",",
							"            \"items\":{\"type\":\"string\"}",
							"        },",
							"        \"vehicles\":{",
							"            \"type\":\"array\",",
							"            \"items\":{\"type\":\"string\"}",
							"        },",
							"        \"starships\":{",
							"            \"type\":\"array\",",
							"            \"items\":{\"type\":\"string\"}",
							"        },",
							"",
							"    }",
							"};",
							"pm.test('Body is correct', function(){",
							"    pm.expect(tv4.validate(data, scheema)).to.be.true;    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTMAN-ECHO auth Basic",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTMAN-ECHO auth header",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		}
	]
}